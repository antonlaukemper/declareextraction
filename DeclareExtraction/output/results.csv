"ID";"Description";"GsSlots";"gen slots";"Correct slots";"Precision";"Recall";"# generated cons";"# gs cons";"GS type";"type error";"Actions";"Cons1";"gsCons1";"Cons2";"gsCons2";"Cons3";"gsCons3"
"0";"A claim should be created, before it can be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  create a claim, Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"1";"A claim must be created, before it is approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  create a claim, Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"2";"When a claim is created, it may be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  create a claim, Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"3";"If a claim is created, it can be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  create a claim, Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"4";"They have to create the claim, before they can approve it.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: They they create the claim, Action: they they approve it]";"Constraint [type=PRECEDENCE, A=Action: They they create the claim, B=Action: they they approve it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"5";"Only after a claim is created, it is possible to approve the claim.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  create a claim, Action: it it approve the claim]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action: it it approve the claim]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"6";"If a claim is approved, then it must have been created first.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  approve a claim, Action:  create it]";"Constraint [type=PRECEDENCE, A=Action:  create it, B=Action:  approve a claim]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"7";"To approve a claim, it should be created first.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  approve a claim, Action:  create it]";"Constraint [type=PRECEDENCE, A=Action:  create it, B=Action:  approve a claim]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"8";"A claim can be approved, after it has been created.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  approve a claim, Action:  create it]";"Constraint [type=PRECEDENCE, A=Action:  create it, B=Action:  approve a claim]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"9";"Approving the claim can happen at anytime, unless it still needs to be created.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action:  approve the claim, Action:  create it, Action:  the claim null, Action:  it null]";"Constraint [type=PRECEDENCE, A=Action:  the claim null, B=Action:  it null]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"10";"Creation of the claim is required, before it can be approved.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  approve it, Action:  creation of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation of the claim null, B=Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approve claim]"
"11";"The creation of the claim is a condition for the approval of the claim.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  the creation of the claim null, Action:  a condition for the approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  the creation of the claim null, B=Action:  a condition for the approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approval claim]"
"12";"Only after the creation of a claim, the approval of the claim is possible.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  the creation of a claim null, Action:  the approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  the creation of a claim null, B=Action:  the approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approval claim]"
"13";"When approval of the claim occurs, creation of the claim must have preceded.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  approval of the claim null, Action:  creation of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation of the claim null, B=Action:  approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approval claim]"
"14";"If approval of the claim occurs, then creation of the claim must have been carried out first.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  carry then creation of the claim, Action:  approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  carry then creation of the claim, B=Action:  approval of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approval claim]"
"15";"The approval of the claim requires that the creation of the claim occurs before it.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action:  the approval of the claim null, Action:  the creation of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  the approval of the claim null, B=Action:  the creation of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approval claim]"
"16";"The approval of the claim should be preceded by the creation of the claim.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action:  the approval of the claim null, Action:  the creation of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  the approval of the claim null, B=Action:  the creation of the claim null]";"Constraint [type=PRECEDENCE, A=Action:  creation claim, B=Action:  approval claim]"
"17";"A claim must be created, before it can be approved or rejected.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action:  create a claim, Action:  approve it, Action:  reject it]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action:  reject it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  reject claim]";"Constraint [type=PRECEDENCE, A=Action:  create a claim, B=Action:  approve it]";"Constraint [type=PRECEDENCE, A=Action:  create claim, B=Action:  approve claim]"
"18";"A claim should be approved before it can be paid out.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  approve a claim, Action:  pay it]";"Constraint [type=PRECEDENCE, A=Action:  approve a claim, B=Action:  pay it]";"Constraint [type=PRECEDENCE, A=Action:  approve claim, B=Action:  pay claim]"
"19";"Once a claim has been approved, it should eventually be paid out.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  approve a claim, Action:  pay it]";"Constraint [type=RESPONSE, A=Action:  approve a claim, B=Action:  pay it]";"Constraint [type=RESPONSE, A=Action:  approve claim, B=Action:  pay claim]"
"20";"Once a claim has been rejected, it should not be paid out.";"3";"4";"2";"0.5";"0.6666666666666666";"1";"1";"SUCCESSION";"true";"[Action:  reject a claim, Action:  not pay it]";"Constraint [type= NOT-RESPONSE, A=Action:  reject a claim, B=Action:  not pay it]";"Constraint [type=SUCCESSION, A=Action:  reject claim, B=Action:  pay claim]"
"21";"Payout should end the process and therefore exclude everything.";"2";"2";"2";"1.0";"1.0";"1";"1";"END";"false";"[Action: Payout payout end the process, Action: Payout payout exclude everything]";"Constraint [type=END, A=Action: Payout payout exclude everything]";"Constraint [type=END, A=Action:  payout]"
"22";"A case can be closed manually at any time, unless we still need to pay out the claim.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"PRECEDENCE";"false";"[Action:  close a case, Action: we we pay the claim, Action:  we null]";"Constraint [type=PRECEDENCE, A=Action:  close a case, B=Action:  we null]";"Constraint [type=PRECEDENCE, A=Action:  pay out claim, B=Action:  case closed manually]"
"23";"The case can be managed at the union after it has been created.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  manage the case, Action:  create it]";"Constraint [type=PRECEDENCE, A=Action:  create it, B=Action:  manage the case]";"Constraint [type=PRECEDENCE, A=Action:  create case, B=Action:  manage case]"
"24";"After a case is created, management can and must arrange a meeting between the union case worker and the other case worker.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  create a case, Action: management management arrange a meeting between the union case worker and the other case worker]";"Constraint [type=RESPONSE, A=Action:  create a case, B=Action: management management arrange a meeting between the union case worker and the other case worker]";"Constraint [type=RESPONSE, A=Action:  create case, B=Action:  arrange meeting]"
"25";"After a meeting is arranged it must be held.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  arrange a meeting, Action:  hold it]";"Constraint [type=RESPONSE, A=Action:  arrange a meeting, B=Action:  hold it]";"Constraint [type=RESPONSE, A=Action:  arrange meeting, B=Action:  hold meeting]"
"26";"The case worker should enter metadata on the case, inform about when he is available for participating in a meeting and then submit the case.";"6";"3";"1";"0.3333333333333333";"0.16666666666666666";"1";"2";"SUCCESSION";"true";"[Action: The case worker the case worker enter metadata, Action: The case worker the case worker inform null, Action:  participate null, Action: The case worker the case worker submit null]";"Constraint [type=PRECEDENCE, A=Action: The case worker the case worker enter metadata, B=Action: The case worker the case worker submit null]";"Constraint [type=SUCCESSION, A=Action:  enter metadata, B=Action:  inform]"
"27";"When a case is submitted it may get a local id at the union, but it should also subsequently be assigned a case id in LO.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action:  submit a case, Action: it it get a local id, Action:  assign a case id in lo]";"Constraint [type=PRECEDENCE, A=Action:  submit a case, B=Action: it it get a local id]";"Constraint [type=PRECEDENCE, A=Action:  submit case, B=Action:  get local id]";"Constraint [type=RESPONSE, A=Action:  submit a case, B=Action:  assign a case id in lo]";"Constraint [type=RESPONSE, A=Action:  submit case, B=Action:  assign case id]"
"28";"When a case is submitted, LO should eventually propose dates.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  submit a case, Action: LO lo propose dates]";"Constraint [type=RESPONSE, A=Action:  submit a case, B=Action: LO lo propose dates]";"Constraint [type=RESPONSE, A=Action:  submit case, B=Action:  propose dates]"
"29";"Only after LO has assigned its case id it is possible to manage the case and for LO to propose dates.";"6";"3";"2";"0.6666666666666666";"0.3333333333333333";"1";"2";"PRECEDENCE";"false";"[Action: LO lo assign its case id, Action:  id null, Action: it it manage the case, Action:  propose dates]";"Constraint [type=PRECEDENCE, A=Action: it it manage the case, B=Action:  propose dates]";"Constraint [type=PRECEDENCE, A=Action:  assign case id, B=Action:  propose dates]"
"30";"Once a date has been agreed upon a meeting should eventually be held.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  agree a date, Action:  hold null]";"Constraint [type=RESPONSE, A=Action:  agree a date, B=Action:  hold null]";"Constraint [type=RESPONSE, A=Action:  agree date, B=Action:  hold meeting]"
"31";"Every process instance starts by examining a patient.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: Every process instance every process instance start null, Action:  examine a patient]";"Constraint [type=INIT, A=Action:  examine a patient]";"Constraint [type=INIT, A=Action:  examine patient]"
"32";"If an x-ray is taken, then the x-ray risk must be checked before it";"3";"3";"0";"0.0";"0.0";"1";"1";"PRECEDENCE";"true";"[Action:  take an x-ray, Action:  check then the x-ray risk]";"Constraint [type=RESPONSE, A=Action:  take an x-ray, B=Action:  check then the x-ray risk]";"Constraint [type=PRECEDENCE, A=Action:  check x-ray risk, B=Action:  perform x-ray risk]"
"33";"Performing a reposition, applying a cast and performing surgery require that x-rays are performed before.";"9";"3";"3";"1.0";"0.3333333333333333";"1";"3";"PRECEDENCE";"false";"[Action:  perform a reposition, Action:  reposition null, Action:  apply a cast, Action:  perform surgery, Action:  perform x-rays]";"Constraint [type=PRECEDENCE, A=Action:  perform a reposition, B=Action:  perform x-rays]";"Constraint [type=PRECEDENCE, A=Action:  perform x-ray, B=Action:  perform reposition]"
"34";"If a surgery is performed, then prescription of rehabilitation occurs eventually after it.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"RESPONSE";"true";"[Action:  perform a surgery, Action:  then prescription of rehabilitation null]";"Constraint [type=PRECEDENCE, A=Action:  perform a surgery, B=Action:  then prescription of rehabilitation null]";"Constraint [type=RESPONSE, A=Action:  perform surgery, B=Action:  prescribe rehabilitation]"
"35";"After a cast is applied, eventually the cast is removed and vice versa, before every removal of a cast, a cast must be applied.";"3";"6";"2";"0.3333333333333333";"0.6666666666666666";"2";"1";"SUCCESSION";"false";"[Action:  apply a cast, Action:  remove the cast, Action:  apply null]";"Constraint [type=RESPONSE, A=Action:  apply a cast, B=Action:  apply null]";"no match";"Constraint [type=PRECEDENCE, A=Action:  apply a cast, B=Action:  remove the cast]";"Constraint [type=SUCCESSION, A=Action:  apply cast, B=Action:  remove cast]"
"36";"The process begins with the booking of the ticket";"2";"3";"0";"0.0";"0.0";"1";"1";"INIT";"true";"[Action:  the process null, Action: The process the process begin null]";"Constraint [type=PRECEDENCE, A=Action:  the process null, B=Action: The process the process begin null]";"Constraint [type=INIT, A=Action:  book ticket]"
"37";"Personal information of passengers can be provided after the booking of the ticket";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"PRECEDENCE";"false";"[Action:  personal information of passengers null, Action:  provide personal information of passengers]";"Constraint [type=PRECEDENCE, A=Action:  personal information of passengers null, B=Action:  provide personal information of passengers]";"Constraint [type=PRECEDENCE, A=Action:  book ticket, B=Action:  provide personal information]"
"38";"The payment of the ticket triggers the completion of the booking phase.";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"RESPONSE";"true";"[Action: The payment of the ticket the payment of the ticket trigger the completion of the booking phase, Action:  book null]";"Constraint [type=PRECEDENCE, A=Action: The payment of the ticket the payment of the ticket trigger the completion of the booking phase, B=Action:  book null]";"Constraint [type=RESPONSE, A=Action:  payment ticket, B=Action:  booking phase completion]"
"39";"The payment of the ticket is eventually followed by the actual transfer of money";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"RESPONSE";"true";"[Action:  the payment of the ticket null, Action:  the actual transfer of money null]";"Constraint [type=PRECEDENCE, A=Action:  the payment of the ticket null, B=Action:  the actual transfer of money null]";"Constraint [type=RESPONSE, A=Action:  payment ticket, B=Action:  money transfer]"
"40";"As long as the Check-in of the flight does not take place, the customers can still modify the provided data to change";"3";"4";"2";"0.5";"0.6666666666666666";"1";"1";"SUCCESSION";"true";"[Action:  do null, Action: the Check-in of the flight the check-in of the flight not take place, Action: the customers the customers modify the provided data, Action:  provide null, Action: the provided data the provided data change null]";"Constraint [type= NOT-PRECEDENCE, A=Action: the Check-in of the flight the check-in of the flight not take place, B=Action: the customers the customers modify the provided data]";"Constraint [type=SUCCESSION, A=Action:  check-in flight, B=Action:  modify provided data]"
"41";"After check-in of the flight, only the cancellation is admitted";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  check-in of the flight null, Action:  only the cancellation null]";"Constraint [type=PRECEDENCE, A=Action:  check-in of the flight null, B=Action:  only the cancellation null]";"Constraint [type=PRECEDENCE, A=Action:  check-in flight, B=Action:  cancellation]"
"42";"The process starts when an invoice is received by the administration department.";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: The process the process start null, Action:  receive an invoice]";"Constraint [type=INIT, A=Action:  receive an invoice]";"Constraint [type=INIT, A=Action:  receive invoice]"
"43";"If they decide that the invoice appears legit then they enter all relevant data into the system";"3";"3";"2";"0.6666666666666666";"0.6666666666666666";"1";"1";"RESPONSE";"true";"[Action: they they decide null, Action: the invoice the invoice appear null, Action:  enter all relevant data]";"Constraint [type=PRECEDENCE, A=Action: they they decide null, B=Action:  enter all relevant data]";"Constraint [type=RESPONSE, A=Action:  decide invoice legit, B=Action:  enter all relevant data]"
"44";"When all necessary approvals have been received the invoice can be paid.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  receive all necessary approvals, Action:  pay the invoice]";"Constraint [type=PRECEDENCE, A=Action:  receive all necessary approvals, B=Action:  pay the invoice]";"Constraint [type=PRECEDENCE, A=Action:  receive all necessary approvals, B=Action:  pay invoice]"
"45";"Once payment is confirmed, the invoice case should be closed.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  confirm payment, Action:  close the invoice case]";"Constraint [type=RESPONSE, A=Action:  confirm payment, B=Action:  close the invoice case]";"Constraint [type=RESPONSE, A=Action:  confirm payment, B=Action:  close case]"
"46";"The receipt of an invoice is required before the administration department can enter data or scan the invoice.";"6";"6";"6";"1.0";"1.0";"2";"2";"PRECEDENCE";"false";"[Action: the administration department the administration department enter data, Action: the administration department the administration department scan the invoice, Action:  the receipt of an invoice null]";"Constraint [type=PRECEDENCE, A=Action:  the receipt of an invoice null, B=Action: the administration department the administration department enter data]";"Constraint [type=PRECEDENCE, A=Action:  receipt of an invoice, B=Action:  enter data]";"Constraint [type=PRECEDENCE, A=Action:  the receipt of an invoice null, B=Action: the administration department the administration department scan the invoice]";"Constraint [type=PRECEDENCE, A=Action:  receipt of an invoice, B=Action:  scan invoice]"
"47";"Enter data is required before any approval can be given.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action:  enter null, Action:  give any approval, Action:  enter data null]";"Constraint [type=PRECEDENCE, A=Action:  enter data null, B=Action:  give any approval]";"Constraint [type=PRECEDENCE, A=Action:  enter data, B=Action:  give approval]"
"48";"Finally, we have to pay the invoice before we can confirm payment.";"3";"3";"3";"1.0";"1.0";"1";"1";"PRECEDENCE";"false";"[Action: we we pay the invoice, Action:  confirm payment]";"Constraint [type=PRECEDENCE, A=Action: we we pay the invoice, B=Action:  confirm payment]";"Constraint [type=PRECEDENCE, A=Action:  pay invoice, B=Action:  confirm payment]"
"49";"If a request is sent, then a proposal is expected to be prepared afterwards";"3";"3";"1";"0.3333333333333333";"0.3333333333333333";"1";"1";"RESPONSE";"true";"[Action:  send a request, Action:  expect then a proposal, Action:  prepare then a proposal]";"Constraint [type=PRECEDENCE, A=Action:  send a request, B=Action:  expect then a proposal]";"Constraint [type=RESPONSE, A=Action:  send request, B=Action:  prepare proposal]"
"50";"A confirmation is supposed to be mandatorily given after the proposal, and vice-versa any proposal is expected to precede a confirmation ";"3";"3";"0";"0.0";"0.0";"1";"1";"SUCCESSION";"true";"[Action:  suppose a confirmation, Action:  give a confirmation, Action:  expect vice-versa any proposal, Action:  vice-versa any proposal null, Action:  a confirmation null]";"Constraint [type=PRECEDENCE, A=Action:  suppose a confirmation, B=Action:  a confirmation null]";"Constraint [type=SUCCESSION, A=Action:  give confirmation, B=Action:  proposal]"
"51";"Every process instance has to start by registering client data";"2";"2";"2";"1.0";"1.0";"1";"1";"INIT";"false";"[Action: Every process instance every process instance start null, Action:  register client data]";"Constraint [type=INIT, A=Action:  register client data]";"Constraint [type=INIT, A=Action:  register client data]"
"52";"Every provided room service must be billed.";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  provide null, Action:  bill every provided room service]";"Constraint [type=RESPONSE, A=Action:  provide null, B=Action:  bill every provided room service]";"Constraint [type=RESPONSE, A=Action:  provide room service, B=Action:  bill]"
"53";"Every provided laundry service must be billed";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action:  provide null, Action:  bill every provided laundry service]";"Constraint [type=RESPONSE, A=Action:  provide null, B=Action:  bill every provided laundry service]";"Constraint [type=RESPONSE, A=Action:  provide laundry service, B=Action:  bill]"
"54";"When the client leaves, the bill must be charged";"3";"3";"3";"1.0";"1.0";"1";"1";"RESPONSE";"false";"[Action: the client the client leave null, Action:  charge the bill]";"Constraint [type=RESPONSE, A=Action: the client the client leave null, B=Action:  charge the bill]";"Constraint [type=RESPONSE, A=Action:  leave, B=Action:  charge bill]"
